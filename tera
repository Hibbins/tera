#!/usr/bin/env bash

set -eu

# shellcheck disable=SC2034
VERSION="0.0.1"
FAVORITE_PATH="$HOME/.tera"
FAVORITE_FILE="favorite.json"
FAVORITE_FULL="${FAVORITE_PATH}/${FAVORITE_FILE}"
SCRIPT_NAME=$(basename "$0")
TEMP_FILE=$(mktemp)
TEMP_FILE2=$(mktemp)
RADIO_BROWSER="https://de1.api.radio-browser.info/json/stations/bytag/"

myrealpath() {
    local LINK REALPATH
    local OURPWD=$PWD
    cd "$(dirname "$1")" || exit
    LINK=$(readlink "$(basename "$1")")
    while [ "$LINK" ]; do
        cd "$(dirname "$LINK")" || exit
        LINK=$(readlink "$(basename "$1")")
    done
    REALPATH="$PWD/$(basename "$1")"
    cd "$OURPWD" || exit
    echo "$REALPATH"
}

# $0 may have ./ in ./script_name
# then use pwd

if [[ -z $(which "${SCRIPT_NAME}") || $0 = "./${SCRIPT_NAME}" ]]; then
    # echo "in 1"
    script_path=$(myrealpath "$0")
    # script_path=${script_path%/*}
else
    # echo "in 2"
    script_path=$(myrealpath "$(which "${SCRIPT_NAME}")")
fi

script_dir="${script_path%/*}"
# shellcheck disable=SC1091
source "${script_dir}/getoptions"

check_cmd() {
    if [[ ! $(command -v "$1") ]]; then
        app=$1
        echo "It seems like you don't have ${app}."
        echo "Please install ${app}."
        exit 1
    fi
}

check_cmd mpv
check_cmd jq

# check ~/.tera/favorite
if [ ! -d "${FAVORITE_PATH}" ]; then
    mkdir "$FAVORITE_PATH"
fi
if [ ! -f "${FAVORITE_FULL}" ]; then
    touch "${FAVORITE_FULL}"
fi

_station_list() {
    jq -r '.[] | .name' <"${FAVORITE_FULL}"
}
# # opens a favorite list and select number to play a station
# tera play
fn_play() {
    echo "Select a number to play."
    STATIONS=$(_station_list)
    echo "$STATIONS" | nl
    echo
    read -rp "Type number to play.   " ANS
    # find the $ANS line e.g. line 2
    URL_RESOLVED=$(jq -r ".[$ANS-1] |.url_resolved" <"${FAVORITE_FULL}")
    echo "$URL_RESOLVED"
    mpv "$URL_RESOLVED"
}

# uses radio-browser.info bytag and grep
# use country codes
# after search result ask a number to play/save
# tera search jazz US
fn_search() {
    echo "Searching ..."
    COUNTRYCODE=$2
    curl $RADIO_BROWSER/"$1" | jq --arg COUNTRYCODE "$COUNTRYCODE" '.[] | select(.countrycode==$COUNTRYCODE) | .name' | tee "$TEMP_FILE" | nl
    ls "$TEMP_FILE"
    # after search result ask a number to play/save
    read -rp "Select a number to add to your favirite list.   " ANS
    # get the content
    # jq ".[$ANS-1]" "$TEMP_FILE"
    rm "$TEMP_FILE"
    # jq '.[] += "$ANS"'

}

fn_delete() {
    echo "Select a number to delete."
    STATIONS=$(_station_list)
    echo "$STATIONS" | nl
    echo
    read -rp "Type number to delete.   " ANS
    jq "del(.[$ANS-1])" <"${FAVORITE_FULL}" >"$TEMP_FILE" && mv "$TEMP_FILE" "$FAVORITE_FULL"
    # echo "$FAVORITE_FULL"
    echo "Deleted."
    rm "$TEMP_FILE"
}

# shellcheck disable=SC1083
parser_definition() {
    setup REST help:usage abbr:true -- \
        "Usage: ${2##*/} [command] [options...] [arguments...]"
    msg -- '' 'Options:'
    disp :usage -h --help
    disp VERSION --version

    msg -- '' 'Commands: '
    msg -- 'Use command -h for a command help.'
    cmd play -- "Play a radio station."
    cmd search -- "Search radio stations."
    cmd delete -- "Delete a station from the favorite file."
}

# shellcheck disable=SC1083
parser_definition_play() {
    setup REST help:usage abbr:true -- \
        "Usage: ${2##*/} play [options] [arguments]"
    msg -- 'Play a station.'
    disp :usage -h --help
}

# shellcheck disable=SC1083
parser_definition_search() {
    setup REST help:usage abbr:true -- \
        "Usage: ${2##*/} search "
    msg -- 'Search a station.'
    disp :usage -h --help
}

# shellcheck disable=SC1083
parser_definition_delete() {
    setup REST help:usage abbr:true -- \
        "Usage: ${2##*/} delete"
    msg -- 'Delete a station.'
    disp :usage -h --help
}

eval "$(getoptions parser_definition parse "$0") exit 1"
parse "$@"
eval "set -- $REST"

if [ $# -gt 0 ]; then
    cmd=$1
    shift
    case $cmd in
    play)
        eval "$(getoptions parser_definition_play parse "$0")"
        parse "$@"
        eval "set -- $REST"
        fn_play "$@"
        ;;
    search)
        eval "$(getoptions parser_definition_search parse "$0")"
        parse "$@"
        eval "set -- $REST"
        fn_search "$@"
        ;;
    delete)
        eval "$(getoptions parser_definition_delete parse "$0")"
        parse "$@"
        eval "set -- $REST"
        fn_delete
        ;;
    --) ;; # no subcommand, arguments only
    esac
fi
